name: Build, Push and Deploy to Kubernetes

on:
  push:
    branches:
      - main # Trigger action on pushes to main branch
      - dev
    paths-ignore:
      - "k8s/**"
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
       - name: Checkout repository
         uses: actions/checkout@v3

       - name: Set up Python
         uses: actions/setup-python@v4
         with:
           python-version: '3.x'
   
       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v2
   
       - name: Log in to Docker container Registry
         uses: docker/login-action@v3
         with:
           username: ${{ secrets.DOCKERHUB_USERNAME }}
           password: ${{ secrets.DOCKERHUB_TOKEN }}

       - name: Build Docker image backend
         run: |
             docker build -f benefits.dev/backend/app.Dockerfile  -t fledxy/benefits-backend:${{ github.sha }} ./benefits.dev/backend
             
       - name: Build Docker image frontend
         run: |
             docker build -f benefits.dev/frontend/app.Dockerfile  -t fledxy/benefits-frontend:${{ github.sha }} ./benefits.dev/frontend
             
       - name: Push Docker images to Docker hub
         run: |
             docker push fledxy/benefits-backend:${{ github.sha }}
             docker push fledxy/benefits-frontend:${{ github.sha }}

       - name: Tag Docker image as latest
         run: |
             docker tag fledxy/benefits-backend:${{ github.sha }} fledxy/benefits-backend:latest
             docker tag fledxy/benefits-frontend:${{ github.sha }} fledxy/benefits-frontend:latest

  deploy-infra:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app.tf

    steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }} 

        - name: Terraform init
          run: terraform init -upgrade

        - name: Terraform plan for environment 
          run: terraform plan --var-file=envs/${{ github.ref_name }}.tfvars

        - name: Terraform apply for environment 
          run: terraform apply -auto-approve --var-file=envs/${{ github.ref_name }}.tfvars
  
  deploy-to-eks:
    needs: [build, deploy-infra]
    runs-on: ubuntu-latest

    steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }} 

        - name: Access to eks cluster
          run: |
              aws eks create-access-entry --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} --principal-arn ${{ secrets.AWS_USER_ARN }} --type STANDARD --user ${{ secrets.AWS_USERNAME }} --kubernetes-groups Viewers --region ${{ secrets.AWS_REGION }}

              aws eks associate-access-policy --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --principal-arn ${{ secrets.AWS_USER_ARN }}  --access-scope type=cluster  --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy

        - name: Update kube config
          run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
        
        - name: Create namespace for branch
          run: |
            kubectl create namespace benefits-${{ github.ref_name }} --dry-run=client -o yaml | kubectl apply -f -
            
        # - name: Create DockerHub secret
        #   run: |
        #      kubectl create secret docker-registry dockerhub --docker-server=https://index.docker.io/v1/ --docker-username=${{ secrets.DOCKERHUB_USERNAME }} --docker-password=${{ secrets.DOCKERHUB_TOKEN}} --docker-email=trinhbao2000@gmail.com --namespace benefits-${{ github.ref_name }}

        - name: Install EBS CSI Driver
          run: |
            helm repo add aws-ebs-csi-driver https://kubernetes-sigs.github.io/aws-ebs-csi-driver
            helm upgrade --install aws-ebs-csi-driver aws-ebs-csi-driver/aws-ebs-csi-driver \
              --namespace benefits-${{ github.ref_name }} 

        - name: Deploy PostgreSQL using Helm
          run: |
            helm uninstall postgres --namespace benefits-${{ github.ref_name }} || true
            helm install postgres k8s/postgres -f k8s/postgres/values.yaml --namespace benefits-${{ github.ref_name }}
            
        - name: Create database connection secret
          run: |
            # Wait for PostgreSQL pod to be ready
            kubectl wait --for=condition=ready pod -l app=postgres --timeout=120s --namespace benefits-${{ github.ref_name }} || true
            
            # Create the database connection secret
            kubectl create secret generic db-secrets --from-literal=database-url="postgresql://benefits:postgres@postgres:5432/benefits_db" -n benefits-dev
        
        - name: Deploy Backend using Kustomize
          run: |
            cd k8s/backend
            kustomize edit set namespace benefits-${{ github.ref_name }}
            kustomize edit set image fledxy/fledxy_application=fledxy/benefits-backend:${{ github.sha }}
            kubectl apply -k .
            
        - name: Deploy Frontend using Kustomize
          run: |
            cd k8s/frontend
            kustomize edit set namespace benefits-${{ github.ref_name }}
            kustomize edit set image fledxy/fledxy_application=fledxy/benefits-frontend:${{ github.sha }}
            kubectl apply -k .
            
        
        - name: Deploy Ingress
          run: kubectl apply -f k8s/ingress.yaml --namespace benefits-${{ github.ref_name }}

        - name: Deploy Network Policies
          run: |
            kubectl apply -f k8s/network-policy.yaml --namespace benefits-${{ github.ref_name }}
  # monitoring:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Setup Helm
  #       uses: azure/setup-helm@v1
      
  #     - name: Configure ArgoCD
  #       run: |
  #         kubectl create namespace argocd || true
  #         kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
  #         kubectl get pods -n argocd
  #         kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 --decode

  #     - name: Install Prometheus and Grafana using Helm
  #       run: |
  #         helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  #         helm repo update
  #         helm install prometheus prometheus-community/prometheus --namespace monitoring --create-namespace
  #         helm install grafana grafana/grafana --namespace monitoring --set persistence.enabled=true,persistence.size=10Gi,persistence.storageClassName=gp2

