name: Build, Push and Deploy to Kubernetes

on:
  push:
    branches:
      - main # Trigger action on pushes to main branch
      - dev
    # paths-ignore:
    #   - "k8s/**"
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
       - name: Checkout repository
         uses: actions/checkout@v3

       - name: Set up Python
         uses: actions/setup-python@v4
         with:
           python-version: '3.x'
   
       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v2
   
       - name: Log in to Docker container Registry
         uses: docker/login-action@v3
         with:
           username: ${{ secrets.DOCKERHUB_USERNAME }}
           password: ${{ secrets.DOCKERHUB_TOKEN }}

       - name: Build Docker image backend
         run: |
             docker build -f benefits.dev/backend/app.Dockerfile  -t fledxy/benefits-backend:${{ github.sha }} ./benefits.dev/backend
             
       - name: Build Docker image frontend
         run: |
             docker build -f benefits.dev/frontend/app.Dockerfile  -t fledxy/benefits-frontend:${{ github.sha }} ./benefits.dev/frontend
             
       - name: Push Docker images to Docker hub
         run: |
             docker push fledxy/benefits-backend:${{ github.sha }}
             docker push fledxy/benefits-frontend:${{ github.sha }}

       - name: Tag Docker image as latest
         run: |
             docker tag fledxy/benefits-backend:${{ github.sha }} fledxy/benefits-backend:latest
             docker tag fledxy/benefits-frontend:${{ github.sha }} fledxy/benefits-frontend:latest

  deploy-infra:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app.tf

    steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }} 

        - name: Terraform init
          run: terraform init -upgrade

        - name: Terraform plan for environment 
          run: terraform plan --var-file=envs/${{ github.ref_name }}.tfvars

        - name: Terraform apply for environment 
          run: terraform apply -auto-approve --var-file=envs/${{ github.ref_name }}.tfvars
  
  deploy-to-eks:
    needs: [build, deploy-infra]
    runs-on: ubuntu-latest

    steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }} 

        - name: Access to eks cluster
          run: |
              aws eks create-access-entry --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} --principal-arn ${{ secrets.AWS_USER_ARN }} --type STANDARD --user ${{ secrets.AWS_USERNAME }} --kubernetes-groups Viewers --region ${{ secrets.AWS_REGION }}

              aws eks associate-access-policy --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --principal-arn ${{ secrets.AWS_USER_ARN }}  --access-scope type=cluster  --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy

        - name: Update kube config
          run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
        
        - name: Create namespace for branch
          run: |
            kubectl create namespace benefits-${{ github.ref_name }} --dry-run=client -o yaml | kubectl apply -f -
            
        - name: Deploy PostgreSQL using Helm
          run: |
            helm uninstall postgres --namespace benefits-${{ github.ref_name }} || true
            helm install postgres k8s/postgres -f k8s/postgres/values.yaml --namespace benefits-${{ github.ref_name }}
            
        - name: Create database connection secret
          run: |
            kubectl create secret generic db-secrets --from-literal=database-url="postgresql://benefits:postgres@postgres:5432/benefits_db" -n benefits-${{ github.ref_name }}
        
        - name: Deploy Backend using Kustomize
          run: |
            cd k8s/backend
            kustomize edit set namespace benefits-${{ github.ref_name }}
            kustomize edit set image fledxy/fledxy_application=fledxy/benefits-backend:${{ github.sha }}
            
            # Set domain based on branch
            if [ "${{ github.ref_name }}" = "main" ]; then
              DOMAIN="fledxy.com"
            else
              DOMAIN="dev.fledxy.com"
            fi
            
            # Update backend configmap
            sed -i "s|CORS_ORIGINS:.*|CORS_ORIGINS: \"https://benefits.$DOMAIN\"|" configmap.yaml
            kubectl apply -k .
            
        - name: Deploy Frontend using Kustomize
          run: |
            cd k8s/frontend
            kustomize edit set namespace benefits-${{ github.ref_name }}
            kustomize edit set image fledxy/fledxy_application=fledxy/benefits-frontend:${{ github.sha }}
            
            # Set domain based on branch
            if [ "${{ github.ref_name }}" = "main" ]; then
              DOMAIN="fledxy.com"
            else
              DOMAIN="dev.fledxy.com"
            fi
            
            # Update frontend configmap
            sed -i "s|DOMAIN:.*|DOMAIN: \"$DOMAIN\"|" configmap.yaml
            kubectl apply -k .
        
        - name: Deploy Ingress and Network Policy
          run: |
            # Set domain based on branch
            if [ "${{ github.ref_name }}" = "main" ]; then
              DOMAIN="fledxy.com"
            else
              DOMAIN="dev.fledxy.com"
            fi
            
            # Replace domain in ingress.yaml and network-policy.yaml
            sed -i "s/\$(DOMAIN)/$DOMAIN/g" k8s/ingress.yaml
            sed -i "s/\$(DOMAIN)/$DOMAIN/g" k8s/network-policy.yaml
            
            # Apply ingress and network policy
            kubectl apply -f k8s/ingress.yaml --namespace benefits-${{ github.ref_name }}
            kubectl apply -f k8s/network-policy.yaml --namespace benefits-${{ github.ref_name }}

  monitoring:
    needs: [build, deploy-infra, deploy-to-eks]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Create monitoring namespace
        run: kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

      - name: Add Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add elastic https://helm.elastic.co
          helm repo add fluent https://fluent.github.io/helm-charts
          helm repo update

      - name: Create Grafana admin credentials
        run: |
          kubectl create secret generic grafana-admin-credentials \
            --from-literal=admin-user=admin \
            --from-literal=admin-password=${{ secrets.GRAFANA_ADMIN_PASSWORD }} \
            -n monitoring --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Elasticsearch credentials
        run: |
          kubectl create secret generic elasticsearch-credentials \
            --from-literal=username=elastic \
            --from-literal=password=${{ secrets.ELASTICSEARCH_PASSWORD }} \
            -n monitoring --dry-run=client -o yaml | kubectl apply -f -

      - name: Install Elasticsearch
        run: |
          helm upgrade --install elasticsearch elastic/elasticsearch \
            -f k8s/monitoring/values/elasticsearch-values.yaml \
            --namespace monitoring

      - name: Wait for Elasticsearch to be ready
        run: |
          echo "Waiting for Elasticsearch to be ready..."
          sleep 180  # Chờ 3 phút

      - name: Create Kibana service account token
        run: |
          # Tạo service account token cho Kibana
          SERVICE_ACCOUNT_TOKEN=$(kubectl exec -it elasticsearch-master-0 -n monitoring -- curl -X POST "http://localhost:9200/_security/service/elastic/kibana/credential/token/kibana-token" -H "Content-Type: application/json" -u elastic:$(kubectl get secret elasticsearch-master-credentials -n monitoring -o jsonpath='{.data.password}' | base64 -d) | jq -r '.token')
          
          # Tạo secret chứa token
          kubectl create secret generic kibana-service-account-token \
            --from-literal=token=$SERVICE_ACCOUNT_TOKEN \
            -n monitoring --dry-run=client -o yaml | kubectl apply -f -

      - name: Update Kibana configuration
        run: |
          # Cập nhật cấu hình Kibana với service account token
          sed -i "s|elasticsearch.serviceAccountToken:.*|elasticsearch.serviceAccountToken: $SERVICE_ACCOUNT_TOKEN|" k8s/monitoring/values/kibana-values.yaml

      - name: Install Kibana
        run: |
          helm upgrade --install kibana elastic/kibana \
            -f k8s/monitoring/values/kibana-values.yaml \
            --namespace monitoring

      - name: Install Prometheus Stack
        run: |
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
            -f k8s/monitoring/values/prometheus-values.yaml \
            --namespace monitoring

      - name: Install Loki
        run: |
          helm upgrade --install loki grafana/loki \
            -f k8s/monitoring/values/loki-values.yaml \
            --namespace monitoring

      - name: Install Fluent Bit
        run: |
          helm upgrade --install fluent-bit fluent/fluent-bit \
            -f k8s/monitoring/values/fluent-bit-values.yaml \
            --namespace monitoring

      - name: Create monitoring ingress
        run: |
          # Set domain based on branch
          if [ "${{ github.ref_name }}" = "main" ]; then
            DOMAIN="fledxy.com"
          else
            DOMAIN="dev.fledxy.com"
          fi
          
          # Replace domain in ingress configuration
          sed -i "s/\$(DOMAIN)/$DOMAIN/g" k8s/monitoring/ingress.yaml
          
          # Apply ingress configuration
          kubectl apply -f k8s/monitoring/ingress.yaml -n monitoring

      - name: Verify monitoring endpoints
        run: |
          echo "Monitoring stack deployed successfully!"
          echo "Grafana: https://grafana.$DOMAIN"
          echo "Prometheus: https://prometheus.$DOMAIN"
          echo "Kibana: https://kibana.$DOMAIN"
  