name: Build, Push and Deploy to Kubernetes

on:
  push:
    branches:
      - main # Trigger action on pushes to main branch
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
       - name: Checkout repository
         uses: actions/checkout@v3

       - name: Set up Python
         uses: actions/setup-python@v4
         with:
           python-version: '3.x'
   
       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v2
   
       - name: Log in to Docker container Registry
         uses: docker/login-action@v3
         with:
           username: ${{ secrets.DOCKERHUB_USERNAME }}
           password: ${{ secrets.DOCKERHUB_TOKEN }}

       - name: Build Docker image
         run: |
             docker build -f app.api/app.Dockerfile  -t fledxy/fledxy_application:${{ github.sha }} .
           
       - name: Push Docker image to Docker hub
         run: |
             docker push fledxy/fledxy_application:${{ github.sha }}
      #  - name: Create DockerHub secret
      #    run: |
      #       kubectl create secret docker-registry dockerhub \
      #       --docker-server=https://index.docker.io/v1/ \
      #       --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
      #       --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
      #       --docker-email=trinhbao2000@gmail.com \
      #       --namespace=benefits-env\
      #       --dry-run=client -o yaml | kubectl apply -f -  
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }} 
            
        - name: Deploy infrastruture
          working-directory: app.tf
          run: |
              terraform init 
              terraform plan -var-file=envs/${{github.ref_name}}.tfvars
              terraform apply -var-file=envs/${{github.ref_name}}.tfvars --auto-approve

        - name: Get AWS user ARN and username
          id: identity
          run: |
              ARN=$(aws sts get-caller-identity --query Arn --output text)
              echo "arn=$ARN" >> $GITHUB_OUTPUT
              echo "username=$(echo $ARN | awk -F'/' '{print $NF}')" >> $GITHUB_OUTPUT

        - name: Access to eks cluster
          run: |
              aws eks create-access-entry\
              --cluster-name ${{ secrets.EKS_CLUSTER_NAME }}\
              --principal-arn ${{ steps.identity.outputs.arn }}\
              --type STANDARD\ 
              --user fledxy\
              --kubernetes-groups Viewers\ 
              --profile $awsprofile\
              --region ${{ secrets.AWS_REGION }}

              aws eks associate-access-policy \
              --cluster-name ${{ secrets.EKS_CLUSTER_NAME }}\
              --profile fledxy\
              --region ${{ secrets.AWS_REGION }}\
              --principal-arn ${{ steps.identity.outputs.arn }} \
              --access-scope type=cluster \
              --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy

        - name: Update kube config
          run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
            
        - name: Apply Kubernetes manifest
          run: kubectl apply -f app.api/k8s/manifest.yaml
